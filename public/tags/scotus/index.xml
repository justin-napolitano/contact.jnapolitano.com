<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scotus on Justin Napolitano</title>
    <link>contact.jnapolitano.com/tags/scotus/</link>
    <description>Recent content in scotus on Justin Napolitano</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>jayburdindustries</copyright>
    <lastBuildDate>Tue, 24 May 2022 00:30:32 +0000</lastBuildDate><atom:link href="contact.jnapolitano.com/tags/scotus/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Configuring Rocky Linux 8 for Quantitative Analysis in Julia</title>
      <link>contact.jnapolitano.com/posts/rocky-linux-8-julia/</link>
      <pubDate>Tue, 24 May 2022 00:30:32 +0000</pubDate>
      
      <guid>contact.jnapolitano.com/posts/rocky-linux-8-julia/</guid>
      <description>Install Jupyter Start with installing jupyter. It will serve as our server for development.
Install Dependencies sudo dnf install gcc python3-devel kernel-headers-$(uname -r) Install Jupyter Via Pip pip3 install --user jupyter Install Julia We will be installing from the official binaries.
Make a directory in user profile. i simply ran mkdir julia in the home folder. The cd to julia.
When in the folder run
Wget wget https://julialang-s3.julialang.org/bin/linux/x64/1.7/julia-1.7.2-linux-x86_64.tar.gz Unpack Then unpack</description>
    </item>
    
    <item>
      <title>Conduct Legal Research with AI Part 8: Case Nodes Sample Data</title>
      <link>contact.jnapolitano.com/posts/legal-research-part-8/</link>
      <pubDate>Mon, 23 May 2022 16:30:32 +0000</pubDate>
      
      <guid>contact.jnapolitano.com/posts/legal-research-part-8/</guid>
      <description>Introduction The legal Research with AI Series is expanding quickly. This is the 9th post related to it in someway. Building this pipeline and integrating multiple datasets into nodes is proving to be verbose.
This post documents merging Oyez and Library of Congress of data structured json files that represent nodes and hierarchal relationships.
Main Function The plan for this program is to:
 Read the prepared dataframe created in the legal research part 7 post for each row of the df load a dictionary from the the libary of congress path and the oyez path Set keys on the Oyez dataset Write the updated Oyez dataset to file  Review the work below:</description>
    </item>
    
    <item>
      <title>Legal Research with AI Part 7: Wrangling Data with Julia</title>
      <link>contact.jnapolitano.com/posts/legal-research-part-7/</link>
      <pubDate>Sun, 22 May 2022 16:30:32 +0000</pubDate>
      
      <guid>contact.jnapolitano.com/posts/legal-research-part-7/</guid>
      <description>Intro In a previous post, I seperated all of the results returned from the Library of Congress API into individual JSON documents to be imported as nodes into a neo4j graph.
In this post, I filter the LOC data against another data set from Oyez that will be integrated in the next post.
Filtering Data Both data sets have been seperated into individual case nodes stored in the json format as a file with the format : .</description>
    </item>
    
    <item>
      <title>Legal Research with AI: Part 6</title>
      <link>contact.jnapolitano.com/posts/masterpiece/</link>
      <pubDate>Sat, 21 May 2022 19:40:32 +0000</pubDate>
      
      <guid>contact.jnapolitano.com/posts/masterpiece/</guid>
      <description>Introduction Currently, my server is mining data from the neo4j graph database.
This post contains a control model completed in SPSS that will serve as the base line for comparison to Ml models. It includes a short literature review of the theoritical foundation of the Attitudinal Model of Judicial Behavior.
Hypothesis When considering the individual Supreme Court Justices, their voting behavior may be best described by the interaction between their ideological precepts and the facts of the case.</description>
    </item>
    
    <item>
      <title>Conduct Legal Research with AI: Part 5</title>
      <link>contact.jnapolitano.com/posts/legal-research-part-5/</link>
      <pubDate>Sat, 21 May 2022 14:30:32 +0000</pubDate>
      
      <guid>contact.jnapolitano.com/posts/legal-research-part-5/</guid>
      <description>Legal Research with AI: Part 5&amp;quot; In the previous posts in this series, I have downloaded the data required to build the neo4j graph. In this post, I will arrange the data into a data structure that will permit me to easily create graph nodes and most importantly relationships.
The Runner Program The raw structure of the data is organized by the results of the api requests. There are thus 80 cases per file.</description>
    </item>
    
    <item>
      <title>Conduct Legal Research with AI: Part 4</title>
      <link>contact.jnapolitano.com/posts/legal-research-part-4/</link>
      <pubDate>Thu, 19 May 2022 22:30:32 +0000</pubDate>
      
      <guid>contact.jnapolitano.com/posts/legal-research-part-4/</guid>
      <description>Conduct Legal Research with AI Part 4 This is the fourth post in a series documenting the process of building an ml pipeline used to train models to predict the outcomes of Supreme Court cases.
You can find the others at:
 Part 1: blog.jnapolitano.io/neo4j_integration/ Part 2: blog.jnapolitano.io/constitution_to_neo/ Part 3: blog.jnapolitano.io/ai-proof-of-concept/  Modeling the Supreme Court Thankfully, much of the ground work has been done by contributors to The Washington University of St.</description>
    </item>
    
    <item>
      <title>Conduct Legal Research with AI: Part 3</title>
      <link>contact.jnapolitano.com/posts/legal-research-part-3/</link>
      <pubDate>Wed, 18 May 2022 14:40:32 +0000</pubDate>
      
      <guid>contact.jnapolitano.com/posts/legal-research-part-3/</guid>
      <description>Conduct Legal Research with AI: Part 3 This is the third post in a series documenting the process of building an ml pipeline that will be used to train models to predict the outcomes of Supreme Court Cases.
You can find the others at:
 blog.jnapolitano.io/neo4j_integration/ blog.jnapolitano.io/constitution_to_neo/  Introduction In this post, I will be testing a sample TensorFlow pipeline against the Supreme Court Database maintained by the Washington University Law School in order to build a proof of concept model for a Supreme Court Graph Analysis project.</description>
    </item>
    
    <item>
      <title>Conduct Legal Research with AI: Part 2</title>
      <link>contact.jnapolitano.com/posts/legal-reserch-part-2/</link>
      <pubDate>Tue, 17 May 2022 18:40:32 +0000</pubDate>
      
      <guid>contact.jnapolitano.com/posts/legal-reserch-part-2/</guid>
      <description>Integrating the Constitution to Neo4j I am currenlty building a graph database of Supreme Court cases in neo4j to model the behavior and decison making of the court.
In this post, I include the classes that I will be using to create individual nodes for the articles, sections, clauses, and subclauses of the Consititution.
Later, these will be related to cases and subjecst in order to train a tensorflow algorithm to recommend case law by issue area and to predict the outcome of cases.</description>
    </item>
    
    <item>
      <title>Conduct Legal Research with AI: Part 1</title>
      <link>contact.jnapolitano.com/posts/legal-research-part-1/</link>
      <pubDate>Mon, 16 May 2022 14:40:32 +0000</pubDate>
      
      <guid>contact.jnapolitano.com/posts/legal-research-part-1/</guid>
      <description>Introduction In a previous post, I detailed the process of crawling the Library of Congress API to generate json files that could be intergrated into you DB of choice.
In this discussion, we will integrate JSON data into a Neo4j graph database.
Overview The process is fairly straightforward. The most difficult part is wrangling your json data into the right format for integration.
The main function first instantiates the database config informormation.</description>
    </item>
    
    <item>
      <title>Conduct Legal Research with AI: Part 0</title>
      <link>contact.jnapolitano.com/posts/legal-research-part-0/</link>
      <pubDate>Mon, 16 May 2022 13:40:32 +0000</pubDate>
      
      <guid>contact.jnapolitano.com/posts/legal-research-part-0/</guid>
      <description>Crawling the Library of Congress API Introduction The United States Library of Congress maintains a rest api for developers to crawl their collections. It is an open source tool that anyone can access in order to conduct research. Check out the documenation at https://libraryofcongress.github.io/data-exploration/.
Creating a crawler I took the approach of writing a generator that produces a search result page object that can be operated upon with each iteration.</description>
    </item>
    
  </channel>
</rss>
